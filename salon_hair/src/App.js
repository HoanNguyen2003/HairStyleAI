import React, { useState } from 'react';
import './styles/style.scss';
import Header from './components/Header';
import Navbar from './components/Navbar';
import UploadSection from './components/UploadSection';
import ResultSection from './components/ResultSection';
import Marketplace from './components/Marketplace';
import MyNFTs from './components/MyNFTs';
import TrendingStyles from './components/TrendingStyles';
import { NFTProvider } from './contexts/NFTContext';

import Reviews from './components/Reviews';
import Footer from './components/Footer';
import Chatbox from './components/Chatbot';
import { Web3Provider } from './contexts/Web3Context';

function App() {
  const [faceImage, setFaceImage] = useState(null);
  const [hairShape, setHairShape] = useState(null);
  const [hairColor, setHairColor] = useState(null);
  const [resultImage, setResultImage] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState(null);
  const [activeSection, setActiveSection] = useState('home');

  const handleProcessImages = async () => {
    if (!faceImage || !hairShape || !hairColor) {
      setError('Vui l√≤ng t·∫£i l√™n ƒë·∫ßy ƒë·ªß c√°c ·∫£nh c·∫ßn thi·∫øt');
      return;
    }

    setIsProcessing(true);
    setError(null);

    const formData = new FormData();
    formData.append('face', faceImage);
    formData.append('shape', hairShape);
    formData.append('color', hairColor);

    try {
      const response = await fetch('http://localhost:5000/swap', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`L·ªói t·ª´ server: ${response.status}`);
      }

      const blob = await response.blob();
      setResultImage(URL.createObjectURL(blob));
    } catch (err) {
      setError(`ƒê√£ x·∫£y ra l·ªói: ${err.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const renderSection = () => {
    switch (activeSection) {
      case 'home':
        return (
          <>
            <div className="intro card">
              <h2 className="card-header">üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c√¥ng c·ª• th·ª≠ ki·ªÉu t√≥c ·∫£o Web3!</h2>
              <p>C√¥ng ngh·ªá AI c·ªßa ch√∫ng t√¥i s·∫Ω gi√∫p b·∫°n d·ªÖ d√†ng th·ª≠ nghi·ªám c√°c ki·ªÉu t√≥c v√† m√†u s·∫Øc kh√°c nhau tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh thay ƒë·ªïi di·ªán m·∫°o th·ª±c t·∫ø. Gi·ªù ƒë√¢y b·∫°n c√≤n c√≥ th·ªÉ mint NFT v√† giao d·ªãch tr√™n marketplace!</p>
            </div>
            
            <div className="main-content">
              <UploadSection 
                faceImage={faceImage}
                hairShape={hairShape}
                hairColor={hairColor}
                setFaceImage={setFaceImage}
                setHairShape={setHairShape}
                setHairColor={setHairColor}
                handleProcessImages={handleProcessImages}
                isProcessing={isProcessing}
                error={error}
              />
              
              <ResultSection 
                resultImage={resultImage}
                isProcessing={isProcessing}
                originalImages={{
                  face: faceImage,
                  hairShape: hairShape,
                  hairColor: hairColor
                }}
              />
            </div>
          </>
        );
      case 'marketplace':
        return <Marketplace />; // Add this case
      case 'my-nfts':
        return <MyNFTs />;
      // ... other cases
      default:
        return <div>Kh√¥ng t√¨m th·∫•y n·ªôi dung ph√π h·ª£p.</div>;
    }
  };

  return (
    <Web3Provider>
      <NFTProvider>

        <div className="app">
          <Header />
          <Navbar activeSection={activeSection} setActiveSection={setActiveSection} />
          
          <div className="container">
            {renderSection()}
            
            {activeSection === 'home' && <Reviews />}
          </div>
          
          <Footer />
          <Chatbox />
        </div>
      </NFTProvider>
    </Web3Provider>
  );
}

export default App;